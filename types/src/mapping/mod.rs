//! Base requirements for type mappings.
//!
//! There are two kinds of types we can map in Elasticsearch; `field`/`data` types and `document` types:
//! 
//! - `FieldType` for types that can be mapped as fields on another type
//! - `DocumentType + FieldType` for types that can be indexed as documents.
//! 
//! Most of the work lives in the `FieldMapping`, which holds the serialisation requirements
//! to convert a Rust type into an Elasticsearch mapping.
//! Document types must also implement `ObjectMapping`, which maps the fields of a struct as properties,
//! and treats the type as `nested` when used as a field itself.
//! 
//! # Examples
//!
//! Define your Elasticsearch types using _Plain Old Rust Structures_.
//! Your types should at least derive `Default`, `Clone` and `serde::Serialize`.
//!
//! ## Derive Mapping
//!
//! Mapping can be generated by deriving `ElasticType` on a struct:
//!
//! ```
//! # #![feature(proc_macro)]
//! # #[macro_use]
//! # extern crate json_str;
//! # #[macro_use]
//! # extern crate serde_derive;
//! # #[macro_use]
//! # extern crate elastic_types_derive;
//! # #[macro_use]
//! # extern crate elastic_types;
//! # extern crate serde;
//! # use elastic_types::prelude::*;
//! #[derive(Serialize, ElasticType)]
//! pub struct MyType {
//!     pub my_date: Date<DefaultDateFormat>,
//!     pub my_string: String,
//!     pub my_num: i32
//! }
//! # fn main() {
//! # }
//! ```
//!
//! This will produce the following mapping:
//!
//! ```
//! # #![feature(proc_macro)]
//! # #[macro_use]
//! # extern crate json_str;
//! # #[macro_use]
//! # extern crate serde_derive;
//! # #[macro_use]
//! # extern crate elastic_types_derive;
//! # #[macro_use]
//! # extern crate elastic_types;
//! # extern crate serde;
//! # extern crate serde_json;
//! # use elastic_types::prelude::*;
//! # #[derive(Serialize, ElasticType)]
//! # pub struct MyType {
//! #   pub my_date: Date<DefaultDateFormat>,
//! #   pub my_string: String,
//! #   pub my_num: i32
//! # }
//! # fn main() {
//! # let mapping = FieldMapper::to_string(MyTypeMapping).unwrap();
//! # let json = json_str!(
//! {
//!     "type": "nested",
//!     "properties": {
//!         "my_date": {
//!             "type": "date",
//!             "format": "basic_date_time"
//!         },
//!         "my_string": {
//!             "type": "text",
//!             "fields": {
//!                 "keyword":{
//!                     "type":"keyword",
//!                     "ignore_above":256
//!                 }
//!             }
//!         },
//!         "my_num": {
//!             "type": "integer"
//!         }
//!     }
//! }
//! # );
//! # assert_eq!(json, mapping);
//! # }
//! ```
//!
//! It's also possible to adjust the mapping using the `#[elastic]` attribute.
//!
//! ### Override Default Mapping Properties
//!
//! You can override the mapping meta properties for an object by providing your own mapping type with `#[elastic(mapping="{TypeName}")]`:
//!
//! ```
//! # #![feature(proc_macro)]
//! # #[macro_use]
//! # extern crate json_str;
//! # #[macro_use]
//! # extern crate serde_derive;
//! # #[macro_use]
//! # extern crate elastic_types_derive;
//! # #[macro_use]
//! # extern crate elastic_types;
//! # extern crate serde;
//! # use elastic_types::prelude::*;
//! #[derive(Serialize, ElasticType)]
//! #[elastic(mapping="MyTypeMapping")]
//! pub struct MyType {
//!     pub my_date: Date<DefaultDateFormat>,
//!     pub my_string: String,
//!     pub my_num: i32
//! }
//!
//! #[derive(Default)]
//! struct MyTypeMapping;
//! impl ObjectMapping for MyTypeMapping {
//!     //Give your own name to a type
//!     fn name() -> &'static str { "my_type" }
//!
//!     fn data_type() -> &'static str { OBJECT_DATATYPE }
//! }
//! # fn main() {
//! # }
//! ```
//!
//! This will produce the following mapping:
//!
//! ```
//! # #![feature(proc_macro)]
//! # #[macro_use]
//! # extern crate json_str;
//! # #[macro_use]
//! # extern crate serde_derive;
//! # #[macro_use]
//! # extern crate elastic_types_derive;
//! # #[macro_use]
//! # extern crate elastic_types;
//! # extern crate serde;
//! # extern crate serde_json;
//! # use elastic_types::prelude::*;
//! # #[derive(Default, Serialize, Deserialize, ElasticType)]
//! # #[elastic(mapping="MyTypeMapping")]
//! # pub struct MyType {
//! #   pub my_date: Date<DefaultDateFormat>,
//! #   pub my_string: String,
//! #   pub my_num: i32
//! # }
//! #
//! # #[derive(Default)]
//! # struct MyTypeMapping;
//! # impl ObjectMapping for MyTypeMapping {
//! #   fn name() -> &'static str { "my_type" }
//! #   fn data_type() -> &'static str { OBJECT_DATATYPE }
//! # }
//! # fn main() {
//! # let mapping = FieldMapper::to_string(MyTypeMapping).unwrap();
//! # let json = json_str!(
//! {
//!     "type": "object",
//!     "properties": {
//!         "my_date": {
//!             "type": "date",
//!             "format": "basic_date_time"
//!         },
//!         "my_string": {
//!             "type": "text",
//!             "fields": {
//!                 "keyword":{
//!                     "type":"keyword",
//!                     "ignore_above":256
//!                 }
//!             }
//!         },
//!         "my_num": {
//!             "type": "integer"
//!         }
//!     }
//! }
//! # );
//! # assert_eq!(json, mapping);
//! # }
//! ```
//!
//! ### Ignore or Rename Fields
//!
//! You can then serialise type mappings with `#[serde]` attributes:
//!
//! ```
//! # #![feature(proc_macro)]
//! # #[macro_use]
//! # extern crate json_str;
//! # #[macro_use]
//! # extern crate serde_derive;
//! # #[macro_use]
//! # extern crate elastic_types_derive;
//! # #[macro_use]
//! # extern crate elastic_types;
//! # extern crate serde;
//! # use elastic_types::prelude::*;
//! #[derive(ElasticType, Serialize)]
//! pub struct MyType {
//!     #[serde(rename="my_renamed_date")]
//!     pub my_date: Date<DefaultDateFormat>,
//!     #[serde(skip_serializing)]
//!     pub ignored: String,
//!     pub my_num: i32
//! }
//! # fn main() {
//! # }
//! ```
//!
//! > NOTE: Fields with a `#[serde(skip_deserializing)]` attribute will still be mapped, because they can
//! still be indexed in Elasticsearch.
//!
//! ## Limitations
//!
//! Automatically deriving mapping has the following limitations:
//!
//! - Generics aren't supported by auto deriving.
//! So you can't `#[derive(ElasticType)]` on `MyType<T>`.
//! - Mapping types can't be shared. This is because they need to map the type fields, so are specific to that type.
//! So you can't share `MyTypeMapping` between `MyType` and `MyOtherType`.
//!
//! All of the above limitations can be worked around by implementing the mapping manually.
//!
//! Remember that Elasticsearch will automatically update mappings based on the objects it sees though,
//! so if your 'un-mapped' field is serialised on `index`, then some mapping will be added for it.
//!
//! ## Manually Implement Mapping
//!
//! You can build object mappings on `stable` by manually implementing the [`ObjectMapping`](trait.ObjectMapping.html) and [`PropertiesMapping`](trait.PropertiesMapping.html) traits:
//!
//! ```
//! # #![feature(proc_macro)]
//! # #[macro_use]
//! # extern crate json_str;
//! # #[macro_use]
//! # extern crate serde_derive;
//! # #[macro_use]
//! # extern crate elastic_types_derive;
//! # #[macro_use]
//! # extern crate elastic_types;
//! # extern crate serde;
//! # use elastic_types::prelude::*;
//! #[derive(Serialize)]
//! pub struct MyType {
//!     pub my_date: Date<DefaultDateFormat>,
//!     pub my_string: String,
//!     pub my_num: i32
//! }
//!
//! //Implement DocumentType for your type. This binds it to the mapping
//! impl DocumentType<MyTypeMapping> for MyType { }
//!
//! //Define the type mapping for our type
//! #[derive(Default)]
//! pub struct MyTypeMapping;
//! impl ObjectMapping for MyTypeMapping {
//!     fn name() -> &'static str { "my_type" }
//! }
//! impl PropertiesMapping for MyTypeMapping {
//!     fn props_len() -> usize { 3 }
//!
//!     fn serialize_props<S>(serializer: &mut S, state: &mut S::StructState) -> Result<(), S::Error>
//!     where S: serde::Serializer {
//!         try!(field_ser(serializer, state, "my_date", Date::<DefaultDateFormat>::mapping()));
//!         try!(field_ser(serializer, state, "my_string", String::mapping()));
//!         try!(field_ser(serializer, state, "my_num", i32::mapping()));
//!
//!         Ok(())
//!     }
//! }
//! # fn main() {
//! # }
//! ```
//! 
//! ## Using the `Document` type
//! 
//! To serialise a document mapping, you can use its mapping type as a generic parameter in `Document<M>`.
//! For example, we can define an index type for the 
//! [Create Index API](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html#mappings) 
//! that includes the mapping for `MyType`:
//! 
//! ```
//! # #![feature(proc_macro)]
//! # #[macro_use]
//! # extern crate json_str;
//! # #[macro_use]
//! # extern crate serde_derive;
//! # #[macro_use]
//! # extern crate elastic_types_derive;
//! # #[macro_use]
//! # extern crate elastic_types;
//! # extern crate serde;
//! # use elastic_types::prelude::*;
//! #[derive(Serialize, ElasticType)]
//! pub struct MyType {
//!     pub my_date: Date<DefaultDateFormat>,
//!     pub my_string: String,
//!     pub my_num: i32
//! }
//! 
//! #[derive(Serialize)]
//! pub struct MyIndex {
//!     pub mappings: Mappings
//! }
//! 
//! #[derive(Serialize)]
//! pub struct Mappings {
//!     pub mytype: Document<MyTypeMapping>
//! }
//! # fn main() {
//! # }
//! ```
//! 
//! Serialising `MyIndex` will produce the following json:
//!
//! ```
//! # #![feature(proc_macro)]
//! # #[macro_use]
//! # extern crate json_str;
//! # #[macro_use]
//! # extern crate serde_derive;
//! # #[macro_use]
//! # extern crate elastic_types_derive;
//! # #[macro_use]
//! # extern crate elastic_types;
//! # extern crate serde;
//! # use elastic_types::prelude::*;
//! # #[derive(Serialize, ElasticType)]
//! # pub struct MyType {
//! #     pub my_date: Date<DefaultDateFormat>,
//! #     pub my_string: String,
//! #     pub my_num: i32
//! # }
//! # #[derive(Serialize)]
//! # pub struct MyIndex {
//! #     pub mappings: Mappings
//! # }
//! # #[derive(Serialize)]
//! # pub struct Mappings {
//! #     pub mytype: Document<MyTypeMapping>
//! # }
//! # fn main() {
//! # let index = serde_json::to_string(MyIndex).unwrap();
//! # let json = json_str!(
//! {
//!     "mappings": {
//!         "mytype": {
//!             "type": "object",
//!             "properties": {
//!                 "my_date": {
//!                     "type": "date",
//!                     "format": "basic_date_time"
//!                 },
//!                 "my_string": {
//!                     "type": "text",
//!                     "fields": {
//!                         "keyword":{
//!                             "type":"keyword",
//!                             "ignore_above":256
//!                         }
//!                     }
//!                 },
//!                 "my_num": {
//!                     "type": "integer"
//!                 }
//!             }
//!         }
//!     }
//! }
//! # );
//! # assert_eq!(json, index);
//! # }
//! ```
//!
//! # Links
//! - [Field Types](https://www.elastic.co/guide/en/elasticsearch/reference/master/mapping-types.html)
//! - [Document Types](https://www.elastic.co/guide/en/elasticsearch/reference/master/mapping.html)

mod field;
mod document;
mod object;

pub use self::object::*;
pub use self::document::*;
pub use self::field::*;

pub mod prelude {
    //! Includes mapping types for all data types.
    //!
    //! This is a convenience module to make it easy to build mappings for multiple types without too many `use` statements.

    pub use ::mappers::*;
    pub use super::object::*;
    pub use super::document::*;
    pub use super::field::*;
    pub use ::date::mapping::*;
    pub use ::ip::mapping::*;
    pub use ::geo::mapping::*;
    pub use ::string::mapping::*;
    pub use ::number::mapping::*;
    pub use ::boolean::mapping::*;
}