//Autogenerated
use hyper::Client;
pub fn get_fields(base: String, fields: String) -> String{
    let mut url_fmtd = String::with_capacity(base.len() + 16 + fields.len());
    url_fmtd.push_str(&base);
    url_fmtd.push_str("/_mapping/field/");
    url_fmtd.push_str(&fields);
    url_fmtd
}
pub fn get_index_fields(base: String, index: String, fields: String) -> String{
    let mut url_fmtd =
        String::with_capacity(base.len() + 1 + 16 + index.len() +
                                  fields.len());
    url_fmtd.push_str(&base);
    url_fmtd.push_str("/");
    url_fmtd.push_str(&index);
    url_fmtd.push_str("/_mapping/field/");
    url_fmtd.push_str(&fields);
    url_fmtd
}
pub fn get_type_fields(base: String, type: String, fields: String) -> String{
    let mut url_fmtd =
        String::with_capacity(base.len() + 10 + 7 + type.len() +
                                  fields.len());
    url_fmtd.push_str(&base);
    url_fmtd.push_str("/_mapping/");
    url_fmtd.push_str(&type);
    url_fmtd.push_str("/field/");
    url_fmtd.push_str(&fields);
    url_fmtd
}
pub fn get_index_type_fields(base: String, index: String, type: String,
                         fields: String) -> String{
    let mut url_fmtd =
        String::with_capacity(base.len() + 1 + 10 + 7 + index.len() +
                                  type.len() + fields.len());
    url_fmtd.push_str(&base);
    url_fmtd.push_str("/");
    url_fmtd.push_str(&index);
    url_fmtd.push_str("/_mapping/");
    url_fmtd.push_str(&type);
    url_fmtd.push_str("/field/");
    url_fmtd.push_str(&fields);
    url_fmtd
}
