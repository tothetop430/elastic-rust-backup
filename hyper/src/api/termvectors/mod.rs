//! http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html

//Autogenerated

use hyper::client::Client;
use hyper::client::response::Response;
use hyper::error::Result;

use RequestParams;

pub fn get_index_type_id<'a>(client: &'a mut Client, req: RequestParams,
                         index: &'a str, _type: &'a str, id: &'a str)
 -> Result<Response>{
    let url_qry = &req.get_url_qry();
    let base = &req.base_url;
    let mut url_fmtd =
        String::with_capacity(base.len() + 1 + 1 + 1 + 13 + index.len() +
                                  _type.len() + id.len() + url_qry.len());
    url_fmtd.push_str(base);
    url_fmtd.push_str("/");
    url_fmtd.push_str(index);
    url_fmtd.push_str("/");
    url_fmtd.push_str(_type);
    url_fmtd.push_str("/");
    url_fmtd.push_str(id);
    url_fmtd.push_str("/_termvectors");
    url_fmtd.push_str(url_qry);
    let res = client.get(&url_fmtd).headers(req.headers);
    res.send()
}
pub fn get_index_type<'a>(client: &'a mut Client, req: RequestParams,
                      index: &'a str, _type: &'a str) -> Result<Response>{
    let url_qry = &req.get_url_qry();
    let base = &req.base_url;
    let mut url_fmtd =
        String::with_capacity(base.len() + 1 + 1 + 13 + index.len() +
                                  _type.len() + url_qry.len());
    url_fmtd.push_str(base);
    url_fmtd.push_str("/");
    url_fmtd.push_str(index);
    url_fmtd.push_str("/");
    url_fmtd.push_str(_type);
    url_fmtd.push_str("/_termvectors");
    url_fmtd.push_str(url_qry);
    let res = client.get(&url_fmtd).headers(req.headers);
    res.send()
}
pub fn post_index_type_id<'a>(client: &'a mut Client, req: RequestParams,
                          index: &'a str, _type: &'a str, id: &'a str,
                          body: &'a str) -> Result<Response>{
    let url_qry = &req.get_url_qry();
    let base = &req.base_url;
    let mut url_fmtd =
        String::with_capacity(base.len() + 1 + 1 + 1 + 13 + index.len() +
                                  _type.len() + id.len() + url_qry.len());
    url_fmtd.push_str(base);
    url_fmtd.push_str("/");
    url_fmtd.push_str(index);
    url_fmtd.push_str("/");
    url_fmtd.push_str(_type);
    url_fmtd.push_str("/");
    url_fmtd.push_str(id);
    url_fmtd.push_str("/_termvectors");
    url_fmtd.push_str(url_qry);
    let res = client.post(&url_fmtd).headers(req.headers).body(body);
    res.send()
}
pub fn post_index_type<'a>(client: &'a mut Client, req: RequestParams,
                       index: &'a str, _type: &'a str, body: &'a str)
 -> Result<Response>{
    let url_qry = &req.get_url_qry();
    let base = &req.base_url;
    let mut url_fmtd =
        String::with_capacity(base.len() + 1 + 1 + 13 + index.len() +
                                  _type.len() + url_qry.len());
    url_fmtd.push_str(base);
    url_fmtd.push_str("/");
    url_fmtd.push_str(index);
    url_fmtd.push_str("/");
    url_fmtd.push_str(_type);
    url_fmtd.push_str("/_termvectors");
    url_fmtd.push_str(url_qry);
    let res = client.post(&url_fmtd).headers(req.headers).body(body);
    res.send()
}
