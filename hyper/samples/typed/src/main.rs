//! Elasticsearch Hyper Client Samples
//!
//! This sample executes a simple search request against some indexed data.
//! The data is provided by a struct with mapping generated by `elastic_types`.

//TODO: Make sure this works

#![feature(plugin, custom_derive)]
#![plugin(serde_macros, elastic_types_macros, json_str)]

extern crate serde;
extern crate serde_json;
extern crate elastic_types;
extern crate hyper;
extern crate elastic_hyper as elastic;

use std::net::Ipv4Addr;
use elastic_types::mapping::prelude::*;
use elastic_types::date::prelude::*;
use hyper::client::Client;
use std::io::Read;

#[derive(Clone, Debug, Serialize, Deserialize, ElasticType)]
pub struct MyStruct {
	pub id: i32,
	pub title: String,
	pub timestamp: ElasticDate<DefaultDateFormat>,
	pub geo: GeoLocation
}

#[derive(Clone, Debug, Serialize, Deserialize, ElasticType)]
pub struct GeoLocation {
	pub ip: Ipv4Addr
}

fn main() {
	let index = "testidx";

	//Create a hyper client
	let (mut client, params) = (Client::new(), elastic::RequestParams::default());

	//Create an index and map our type
	let _ = elastic::indices::create::put_index(&mut client, &params, index, "").unwrap();
	let _ = elastic::indices::put_mapping::put_index_type(
		&mut client, &params,
		index, MyStruct::name(),
		&TypeMapper::to_string(MyStructMapping).unwrap()
	).unwrap();

	//Index some data. For lots of data, prefer the `bulk` mod
	for t in get_data() {
		let _ = elastic::index::put_index_type_id(
			&mut client, &params,
			index, MyStruct::name(), &t.id.to_string(),
			&serde_json::to_string(&t).unwrap()
		);
	}

	let mut res = elastic::search::post_index_type(
		&mut client, &params,
		index, MyStruct::name(),
		json_lit!({
			query: {
				query_string: {
					query: "*"
				}
			}
		})
	).unwrap();

	//Deserialisation goes here
	let mut message = String::new();
	let _ = res.read_to_string(&mut message);

	println!("Got response: {}", message);
}

fn get_data() -> Vec<MyStruct> {
	vec![
		MyStruct {
			id: 1,
			title: String::from("Some Title"),
			timestamp: ElasticDate::now(),
			geo: GeoLocation {
				ip: Ipv4Addr::new(10, 0, 0, 1)
			}
		},
		MyStruct {
			id: 2,
			title: String::from("Some Other Title"),
			timestamp: ElasticDate::now(),
			geo: GeoLocation {
				ip: Ipv4Addr::new(10, 0, 0, 2)
			}
		}
	]
}
