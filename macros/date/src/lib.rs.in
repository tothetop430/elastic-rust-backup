extern crate syntax;
extern crate rustc;
extern crate rustc_plugin;

use rustc_plugin::Registry;
use syntax::ast::Expr;
use syntax::codemap::Span;
use syntax::parse::token::{self};
use syntax::tokenstream::TokenTree;
use syntax::ptr::P;
use syntax::ext::base::{ ExtCtxt, MacResult, DummyResult, MacEager };
use syntax::ext::build::AstBuilder;

#[doc(hidden)]
pub fn expand_date_fmt(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree]) -> Box<MacResult+'static> {
	let mut fmt = String::new();

	for arg in args {
		let _fmt = match *arg {
			TokenTree::Token(_, token::Literal(token::Lit::Str_(s), _)) => s.to_string(),
			_ => {
				cx.span_err(sp, "argument should be a single string literal");
				return DummyResult::any(sp);
			}
		};

		fmt.push_str(&_fmt);
	}

	//Build up the token tree
	let tokens = to_tokens(&fmt);

	let ident = token::str_to_ident("items");
	let c = tokens.len();

	let mut stmts = vec![quote_stmt!(cx, let mut $ident = Vec::with_capacity($c);).unwrap()];

	stmts.extend(tokens.iter().map(|t| {
		let t = Formatter::to_stmt(t, cx);
		quote_stmt!(cx, $ident.push($t);).unwrap()
	}));
	stmts.push(cx.stmt_expr(quote_expr!(cx, $ident)));

	let block = cx.block(sp, stmts);

	MacEager::expr(quote_expr!(cx, $block))
}

#[doc(hidden)]
#[plugin_registrar]
pub fn plugin_registrar(reg: &mut Registry) {
	reg.register_macro("date_fmt_to_tokens", expand_date_fmt);
}

impl Formatter {
	pub fn to_stmt(item: &Item, cx: &ExtCtxt) -> P<Expr> {
		match *item {
			Item::Literal(c) => 							quote_expr!(cx, chrono::format::Item::Literal($c)),
			Item::Numeric(Numeric::Year, Pad::Zero) => 		quote_expr!(cx, chrono::format::Item::Numeric(chrono::format::Numeric::Year, chrono::format::Pad::Zero)),
			Item::Numeric(Numeric::Month, Pad::Zero) => 	quote_expr!(cx, chrono::format::Item::Numeric(chrono::format::Numeric::Month, chrono::format::Pad::Zero)),
			Item::Numeric(Numeric::Day, Pad::Zero) => 		quote_expr!(cx, chrono::format::Item::Numeric(chrono::format::Numeric::Day, chrono::format::Pad::Zero)),
			Item::Numeric(Numeric::Hour, Pad::Zero) => 		quote_expr!(cx, chrono::format::Item::Numeric(chrono::format::Numeric::Hour, chrono::format::Pad::Zero)),
			Item::Numeric(Numeric::Minute, Pad::Zero) => 	quote_expr!(cx, chrono::format::Item::Numeric(chrono::format::Numeric::Minute, chrono::format::Pad::Zero)),
			Item::Numeric(Numeric::Second, Pad::Zero) => 	quote_expr!(cx, chrono::format::Item::Numeric(chrono::format::Numeric::Second, chrono::format::Pad::Zero)),
			Item::Fixed(Fixed::Nanosecond3) => 				quote_expr!(cx, chrono::format::Item::Fixed(chrono::format::Fixed::Nanosecond3)),
			_ => 											quote_expr!(cx, chrono::format::Item::Literal(""))
		}
	}
}
